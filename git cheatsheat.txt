Remotes
		git branch --set-upstream-to=<remote>/<branch>
		git fetch  NOTE: typically followed by a merge doesnt overwright working copy
		git pull  NOTE: merges in the remote changes.
		git pull --rebase NOTE: destroys all local changes, avoids merge.
		git rebase --continue NOTE: call after pull--rebase and merging anything git can't handle
		git remote rename <old> <new>
		git remote remove <remote>
		git remote show <remote>
		git remote -v 
		git remote prune (removes unused branches)
		git push origin master:foo will push your local master branch to the branch foo on the remote origin
		git config receive.denyCurrentBranch ignore
	For new branches in the remote.
		Make sure you've pulled the new upstream branch into your local repo:
		First, ensure your working tree is clean (commit/stash/revert any changes)
		"git fetch upstream" to retrieve the new upstream branch

		Create and switch to a local version of the new upstream branch 
		"git checkout -b newbranch upstream/newbranch"

		When you're ready to push the new branch to origin (-u to set tracking):
		"git push -u origin newbranch"

Branches & Checkout
git checkout <existing branch>
git checkout -b <new branch>
git branch -d <branch to delete>
git branch <new branch>
git branch --no-merged 
git branch -m <new name> (renames current branch)
git branch -m <old name> <new name>
Start Branch at a previous commit
	git checkout <sha1>
	git branch <new branch>
Undo Inadvertent Fast Forward	or 
	A-B---- master			A-B-C-D
		 \   /
      C-D develop
		
	git checkout master
	git reset --hard <sha-B>
	git checkout develop
	git reset --hard <sha-D>
	git checkout master
	git merge develop --no-ff
git diff <src_branch> <target_branch>


Tagging
git tag <1.0.0> <commit-sha>
	
		
Commits
git reset --hard <last good sha> "like it never happened"
git reset --soft orgin/master  rollback branch to same commit as origin/master,
                               but keeps changes and moves files to staging
git reset <sha> (undoes all commits, but preserves local changes)
git reflog and git reset or git checkout  "undo's the above"
git commit --amend
Multiple commits on wrong branch?
	See "Undo Indadvertent Fast Forward", creating a new branch if necessary
Committed on the wrong branch
	git reset --soft HEAD~1
	*create or checkout branch*
	git commit 
Changes on wrong branch (not committed)	
	git checkout -b newbranch  (changes remain as-is)
  -or-
	git checkout existingbranch (changes remain as-is)
Changes, another approach
	git stash
	git checkout anotherbranch
	git stash apply
Recover inadvertently deleted, not committed
	git reset HEAD --hard		NOTE: does not keep WIP.	
Drop the last commit
	git reset HEAD^ --hard
	or: git reset HEAD~# --hard  :where #=number of commits from pointer
Unstage a deleted file
	git reset -- <file>
	git checkout  -- <file>
Remove last PUSHED change from the remote repos
	git push -f origin HEAD^:<branch>
Change a commit author or message
	A-B-C-D-E-F where F as HEAD
	git rebase -i <sha-B>
	change the lines for both C & D to "edit"
	when rebase pauses at C... git commit --amend --author = "Author name <email@address.com>"
	git rebase --continue
	pause at D... "git commit --amend --message = "blah,blah,blah"
	"git rebase --continue" until complete
Remove a pushed commit.
	git revert <sha>   NOTE: this is an "anti-matter" reversal.
Change last commit message
	git commit --amend -m "new message"
	

Info
Git image size
	git gc
	du -sh .git/
Who dunnit
	git blame <flie>
	git gui blame <flie>

Log
git log
git log --author=<name>
git log --pretty=oneline
git log --graph --oneline --decorate --all
git log --name-status  (only lists files)
git log --grep="somethign in message"


Files
git rm <file>
git rm --cached <file> (removes from git, but keeps on disk)
git mv <old name> <new name>


Commit only selected files to a branch
1-Checkout just the file you want from your old branch
		git checkout old_branch path/to/some/file
2-repeat as necessary for additional files
3-Commit the files to your new branch
		git commit -a
4-Push new branch to your origin
		git push origin master
		

Alternate to git pull from remote...
		git fetch origin --prune , 
	inspect changes by...
		git checkout origin/branch-name
		git checkout branch-name
		git merge --ff-only origin/branch-name 
  if you have local changes, this will fail.. then...
		git rebase --preserve-merges origin/branch-name 
  once it's done your local branch will be up-to-date with the changes from
	the remote, and your commits will be the newest in the history. Cleaner 
	history, no superfluous merge commits.
		update-from = "!f() { git fetch $1 --prune; git merge --ff-only $1/$2 || git rebase --preserve-merges $1/$2; }; f"

http://stackoverflow.com/questions/3357122/git-pull-vs-git-fetch-git-rebase
If you have...
- o - o - o - H - A - B - C (master)
               \
                P - Q - R (origin/master)

Then git pull produces...
- o - o - o - H - A - B - C - X (master)
               \             /
                P - Q - R --- (origin/master)
								
git fetch + git rebase (or git pull --rebase) gives this...
- o - o - o - H - P - Q - R - A' - B' - C' (master)
                          |
                          (origin/master)